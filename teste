#include <iostream>
#include <math.h>
#include <string>
using namespace std;

class Planalto{
  private:
    int tamx;
    int tamy;
    int quantSondas;
  public:
    // inicializador
    Planalto(int x, int y, int q){
      this->setTamx(x);
      this->setTamy(y);
      this->setQuant(q);
    }
    // métodos setters
    void setTamx(int);
    void setTamy(int);
    void setQuant(int);
    // métodos getters
    int getQuant();
    int getTamx();
    int getTamy();
};

//setters
void Planalto::setTamx(int x){
  this->tamx = x;
}

void Planalto::setTamy(int y){
  this->tamy = y;
}

void Planalto::setQuant(int quant){
  this->quantSondas = quant;
}

//getters
int Planalto::getTamx(){
  return this->tamx;
}

int Planalto::getTamy(){
  return this->tamy;
}

int Planalto::getQuant(){
  return this->quantSondas;
}

class Sonda{ // É criada a classe Sonda com todos os atributos que serão importantes para o problema
  private:
    int posx; // Posição x
    int posy; // Posição y
    char dir; // Direção da sonda
    Sonda *proximo; // atributo que será usado na classe lista sondas para outras funções
  public:
    Sonda(int x, int y, char dir){ // Inicializador da sonda
      this->setPosx(x);
      this->setPosy(y);
      this->setDir(dir);
      this->setProximo(NULL);
    }
    // métodos setters
    void setPosx(int); 
    void setPosy(int);
    void setDir(char);
    void setProximo (Sonda *);
    // métodos getters
    int getPosx();
    int getPosy();
    char getDir();
    Sonda* getProx();
    // métodos de movimentação
    void gira(int);
    int frente(Planalto);
    /// métodos auxiliares
    int transf(char);
    void mostra();
    bool verifica(int, int, int);
};

void Sonda::mostra(){ //método de saída
  cout << this->posx << " " << this->posy << " " << this->dir << endl; 
}

// métodos setters
void Sonda::setPosx(int x){ 
  this->posx = x;
}

void Sonda::setPosy(int y){
  this->posy = y;
}

void Sonda::setDir(char dir){
  this->dir = dir;
}

void Sonda::setProximo (Sonda *p){
  this->proximo = p;
}

// métodos getters
int Sonda::getPosx(){
  return this->posx;
}

int Sonda::getPosy(){
  return this->posy;
}

char Sonda::getDir(){
  return this->dir;
}

Sonda* Sonda::getProx(){
  return this->proximo;
}

int Sonda::transf(char dir){ // transforma a direção em um número para que este seja utilizado de forma mais fácil

  switch(dir){
    case 'N': return 1;
      break;
    case 'E': return 2;
      break;
    case 'S': return 3;
      break;
    case 'W': return 4;
      break;
  }
}

void Sonda::gira(int t){
  // utilizando o método transf, o método gira soma 1 caso o comando seja girar para a direita, e subtrai 1 caso o comando seja girar para a esquerda (fazendo as transformações necessárias caso o programa passe de 1-4). Depois, faz o set com a direção resultante
  int aux = this->transf(this->getDir()) + t;

  if (aux == 0){
    aux = 4;
  }
  else if(aux == 5){
    aux = 1;
  }

  switch(aux){
    case 1: this->setDir('N');
      break;
    case 2: this->setDir('E');
      break;
    case 3: this->setDir('S');
      break;
    case 4: this->setDir('W');
      break;
  }
}

bool Sonda::verifica(int p, int d, int t){ // verifica se a sonda pode avançar naquela direção, p é a posição atual da sonda do respectivo eixo, d é a direção (1 / - 1) e t é o tamanho do terreno 
  if(p + d < t && p + d >= 0){
    return true;
  }
  return false;
}

int Sonda::frente(Planalto p){
 // movimenta para frente, alternando o modo de acordo com a direção da sonda. Antes, verifica se pode
  switch(this->getDir()){
    case 'N': 
      if(verifica(this->getPosy(), 1, p.getTamy())){
        this->setPosy(this->getPosy() + 1);
        return 0;
      }
      break;
    case 'S':
      if(verifica(this->getPosy(), -1, p.getTamy())){
        this->setPosy(this->getPosy() - 1);
        return 0;
      }
      break;
    case 'E':
      if(verifica(this->getPosx(), 1, p.getTamx())){
        this->setPosx(this->getPosx() + 1);
        return 0;
      }
      break;
    case 'W':
      if(verifica(this->getPosx(), -1, p.getTamx())){
        this->setPosx(this->getPosx() - 1);
        return 0;
      }
      break;
  }
  return 1;
}

class lista_Sondas{ // classe que será usada para armazenas as sondas, que poderá trocar o comando entre as sondas, remover alguma sonda, entre outras funções que podem ser implementadas
  private:
    Sonda *primeira;
  public:
    lista_Sondas(){
      this->setPrimeira(NULL);
    }
    void setPrimeira(Sonda*);
    Sonda* getPrimeira();
    void adiciona(Sonda*);
    Sonda* verifica(char, int, int);
    int remove(Sonda*);
};

void lista_Sondas::setPrimeira(Sonda *s){
  this->primeira = s;
}

Sonda* lista_Sondas::getPrimeira(){
  return this->primeira;
}

void lista_Sondas::adiciona(Sonda *s){
  if (this->getPrimeira() == NULL){
    this->setPrimeira(s);
  }
  else{
    Sonda *aux = this->getPrimeira();

    while(aux->getProx() != NULL){
      aux = aux->getProx();
    }

    aux->setProximo(s);
  }
}

Sonda* lista_Sondas::verifica(char d, int x, int y){ // verifica se há sondas no caminho. d, x e y são as informações da sonda atual (a que está sendo movimentada)
  Sonda *aux = this->primeira;

  switch(d){
    case 'N': y += 1;
      break;
    case 'S': y -= 1;
      break;
    case 'W': x -= 1;
      break;
    case 'E': x += 1;
      break;
  }

  while(aux != NULL){
    if(aux->getPosx() == x && aux->getPosy() == y){
      return aux;
    }
    aux = aux->getProx(); // itera pelas sondas
  }

  return NULL;
}

int lista_Sondas::remove(Sonda *s){ // remove a sonda
  Sonda *aux = this->getPrimeira();

  if(aux == s){
    this->setPrimeira(aux->getProx());
    return 1;
  }
  else{
    int cont = 0;

    while(aux->getProx() != s){
      aux = aux->getProx();
      cont += 1;
    }

    aux->setProximo(s->getProx());

    return cont;
  }
}

int main(){
  int px, py;
  char aux;

  cin >> px >> py;
  Planalto planalto(px+1, py+1, 0);
  lista_Sondas *lista = new lista_Sondas();

  cout << "Inserir sonda S/N: ";
  cin >> aux;

  while (aux == 'S'){
    planalto.setQuant(planalto.getQuant() + 1);
    int ci = 0;

    int x, y;
    char d;

    cin >> x >> y >> d;

    Sonda *sonda = new Sonda(x, y, d);

    lista->adiciona(sonda);


    cin.ignore();

    string op;

    getline(cin, op);

    for (int i = 0; op[i] != '\0' ; i++){
      switch(op[i]){
        case 'L': sonda->gira(-1);
          break;
        case 'R': sonda->gira(1);
          break;
        case 'M':
          Sonda *auxiliar = lista->verifica(sonda->getDir(), sonda->getPosx(), sonda->getPosy());
          if (auxiliar != NULL){
            cout << "A sonda " << lista->remove(auxiliar) << " estava no caminho e foi retirada para que o trajeto fosse completo" << endl;
            planalto.setQuant(planalto.getQuant() - 1);
          }
          ci += sonda->frente(planalto);
          break;
      }
    }

    if (ci > 0){
      cout << ci << " comando(s) ignorados. A sonda passaria do limite do planato\n";
    }

    sonda->mostra();

    cin.clear();

    cout << "Inserir outra sonda? S/N: ";
    cin >> aux;
  }

return 0;
}
